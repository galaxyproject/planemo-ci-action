name: 'planemo discover'
description: 'Installs planemo and discovers changed repositories of tools or workflows'
author: 'iuc@galaxyproject.org'
inputs:
  mode:
    descriptions: 'Mode selector: setup|lint|test|combine|check|deploy'
    default: 'setup'
  create-cache: 
    description: 'Set false if creating a cache is not needed'
    default: false
  planemo-version:
    description: 'Set a specific planemo version or url. If not specified installs latest planemo release from PyPI'
    default: 'planemo'
  galaxy-branch:
    description: 'Galaxy branch to use'
    default: ''
  galaxy-fork:
    description: 'Galaxy fork to use'
    default: ''
  python-version:
    description: 'Python version to use'
    default: '3.7'
  repository-list:
    description: 'List of repositories.'
    default: ''
  tool-list:
    description: 'List of tools'
    default: ''
  chunk-count:
    description: 'Number of tests to run in parallel'
    default: 20
  database-connection:
    description: 'Database connection to use for tests'
    default: 'postgresql://postgres:postgres@localhost:5432/galaxy'
  chunk:
    description: 'Current test chunk'
    default: 0
  max-chunks:
    description: 'Maximum number of chunks to use.'
    default: 0
  html-report:
    description: 'Create HTML report?'
    default: false
  markdown-report:
    description: 'Create markdown report?'
    default: false
  shed-target:
    description: 'Which toolshed to target?'
    default: 'toolshed'
  shed-key:
    description: '(Secret!) tool shed api key'
    default: 'toolshed'
  setup-cvmfs:
    description: "Setup CVMFS mount for main.galaxyproject.org and data.galaxyproject.org"
    default: false
  workflows:
    description: "CI for workflows instead of tools"
    default: false
  workflow-namespace:
    description: 'Github namespace under which to create workfow repositories'
    default: 'iwc-workflows'
  update-test-data:
    description: 'Flag to trigger update of test data for test mode'
    default: false
  github-token:
    description: '(Secret!) Github PAT token. Needed for creating workflow repositories with workflow-upload'
    default: ''
  # inputs that are needed for testing this action
  # not supposed to be used
  github-event-name-override:
    description: 'ONLY FOR TESTING: override GITHUB_EVENT_NAME'
    default: ''
  github-ref-override:
    description: 'ONLY FOR TESTING: override GITHUB_REF'
    default: ''

outputs:
  commit-range:
    description: 'Commit range'
    value: ${{ steps.commit-range.outputs.commit-range }}
  repository-list:
    description: 'List of repositories'
    value: ${{ steps.repository-list.outputs.repository-list }}
  tool-list:
    description: 'List of tools'
    value: ${{ steps.tool-list.outputs.tool-list }}
  chunk-count:
    description: 'Number of chunks to use'
    value: ${{ steps.chunk-count.outputs.chunk-count }}
  chunk-list:
    description: "List of chunks"
    value: ${{ steps.chunk-list.outputs.chunk-list }}
  statistics:
    description: "Statistics of combined repositories"
    value: ${{ steps.statistics.outputs.statistics }}

runs:
  using: 'composite'
  steps:
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install planemo
      run: pip install wheel ${{ inputs.planemo-version }}
      shell: bash
    - name: Install jq
      run: sudo apt-get install jq
      shell: bash
    - name: run planemo actions
      run: ${{ github.action_path }}/planemo_ci_actions.sh
      shell: bash
      env:
        EVENT_BEFORE: ${{ github.event.before }}
        CREATE_CACHE: ${{ inputs.create-cache }}
        GALAXY_BRANCH: ${{ inputs.galaxy-branch }}
        GALAXY_FORK: ${{ inputs.galaxy-fork }}
        PYTHON_VERSION: ${{ inputs.python-version }}
        REPOSITORIES: ${{ inputs.repository-list}}
        TOOLS: ${{ inputs.tool-list }}
        CHUNK: ${{ inputs.chunk }}
        MAX_CHUNKS: ${{ inputs.max-chunks}}
        CHUNK_COUNT: ${{ inputs.chunk-count}}
        DATABASE_CONNECTION: ${{ inputs.database-connection }}
        MODE: ${{ inputs.mode }}
        PLANEMO_HTML_REPORT: ${{ inputs.html-report }}
        PLANEMO_MD_REPORT: ${{ inputs.markdown-report }}
        SHED_TARGET: ${{ inputs.shed-target }}
        SHED_KEY: ${{ inputs.shed-key }}
        SETUP_CVMFS: ${{ inputs.setup-cvmfs }}
        WORKFLOW_NAMESPACE: ${{ inputs.workflow-namespace }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        WORKFLOWS: ${{ inputs.workflows }}
        UPDATE_TEST_DATA: ${{ inputs.update-test-data }}
        GITHUB_EVENT_NAME_OVERRIDE: ${{ inputs.github-event-name-override }}
        GITHUB_REF_OVERRIDE: ${{ inputs.github-ref-override }}

    # see https://trstringer.com/github-actions-multiline-strings/
    - run: |
        REPOS=$(cat repository_list.txt)
        REPOS="${REPOS//'%'/'%25'}"
        REPOS="${REPOS//$'\n'/'%0A'}"
        REPOS="${REPOS//$'\r'/'%0D'}"
        echo "::set-output name=repository-list::$REPOS"
      id: repository-list
      shell: bash
    - run: |
        TOOLS=$(cat tool_list.txt)
        TOOLS="${TOOLS//'%'/'%25'}"
        TOOLS="${TOOLS//$'\n'/'%0A'}"
        TOOLS="${TOOLS//$'\r'/'%0D'}"
        echo "::set-output name=tool-list::$TOOLS"
      id: tool-list
      shell: bash
    - run: echo "::set-output name=commit-range::$(cat commit_range.txt)"
      id: commit-range
      shell: bash
    - run: echo "::set-output name=chunk-count::$(cat chunk_count.txt)"
      id: chunk-count
      shell: bash
    - run: echo "::set-output name=chunk-list::[$(seq -s ", " 0 $((${{ steps.chunk-count.outputs.chunk-count }} - 1)))]"
      id: chunk-list
      shell: bash
    - run: echo ::set-output name=statistics::$(cat statistics.txt)
      id: statistics
      shell: bash
