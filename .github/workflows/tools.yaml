on: [push, pull_request]

name: 'Test action for tools'

env:
  GALAXY_FORK: galaxyproject
  GALAXY_BRANCH: master
  MAX_CHUNKS: 4

jobs:
  setup-pr-tools:
    name: Setup as in PR for tools
    runs-on: ubuntu-latest
    outputs:
      galaxy-head-sha: ${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
      repository-list: ${{ steps.discover.outputs.repository-list }}
      tool-list: ${{ steps.discover.outputs.tool-list }}
      chunk-count: ${{ steps.discover.outputs.chunk-count }}
      chunk-list: ${{ steps.discover.outputs.chunk-list }}
    strategy:
      matrix:
        python-version: ['3.7']
    steps:
    - name: Print github context properties
      run: |
        echo 'event: ${{ github.event_name }}'
        echo 'sha: ${{ github.sha }}'
        echo 'ref: ${{ github.ref }}'
        echo 'head_ref: ${{ github.head_ref }}'
        echo 'base_ref: ${{ github.base_ref }}'
        echo 'event.before: ${{ github.event.before }}'
        echo 'event.after: ${{ github.event.after }}'
    - name: Determine latest commit in the Galaxy repo
      id: get-galaxy-sha
      run: echo "galaxy-head-sha=$(git ls-remote https://github.com/${{ env.GALAXY_FORK }}/galaxy refs/heads/${{ env.GALAXY_BRANCH }} | cut -f1)" >> $GITHUB_OUTPUT
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache .cache/pip
      uses: actions/cache@v3
      id: cache-pip
      with:
        path: ~/.cache/pip
        key: pip_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    - name: Cache .planemo
      uses: actions/cache@v3
      id: cache-planemo
      with:
        path: ~/.planemo
        key: planemo_cache_py_${{ matrix.python-version }}_gxy_${{ steps.get-galaxy-sha.outputs.galaxy-head-sha }}
    # Install the `wheel` package so that when installing other packages which
    # are not available as wheels, pip will build a wheel for them, which can be cached.
    - name: Install wheel
      run: pip install wheel
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Introduce a change on test tool1
      run: |
        git config --global user.name "Arthur Dent"
        git config --global user.email "a.dent@galaxyproject.org"
        echo "" >> test/tools/tool1/tool1.xml
        git commit -m bump test/tools/tool1/tool1.xml
    - name: Fake a Planemo run to update cache and determine commit range, repositories, and chunks
      uses: ./
      id: discover
      with:
        create-cache: ${{ steps.cache-pip.outputs.cache-hit != 'true' || steps.cache-planemo.outputs.cache-hit != 'true' }}
        galaxy-fork: ${{ env.GALAXY_FORK }}
        galaxy-branch: ${{ env.GALAXY_BRANCH }}
        max-chunks: ${{ env.MAX_CHUNKS }}
        python-version: ${{ matrix.python-version }}
    - name: Check commit range
      run: if ! grep "\.\." <<<$(echo ${{ steps.discover.outputs.commit-range }}); then echo "wrong commit range"; exit 1; fi
    - name: Check content of repository list
      run: |
        if ! grep -q "tool1" <<<$(echo "${{ steps.discover.outputs.repository-list }}"); then echo "tool1 must be in repo list"; exit 1; fi
        if grep -q "tool2" <<<$(echo "${{ steps.discover.outputs.repository-list }}"); then echo "tool2 must not be in repo list"; exit 1; fi
    - name: Check content of tool list
      run: |
        if ! grep -q "tool1.xml" <<<$(echo "${{ steps.discover.outputs.tool-list }}"); then echo "tool1.xml must be in tool list"; exit 1; fi
        if grep -q "tool2.xml" <<<$(echo "${{ steps.discover.outputs.tool-list }}"); then echo "tool2.xml must not be in tool list"; exit 1; fi
    - name: Check number of chunks
      run: if [ "${{ steps.discover.outputs.chunk-count }}" != "1" ]; then echo "wrong chunk-count"; exit 1; fi

  setup-ci-tools:
    name: Setup as in CI for tools
    if: ${{ github.repository_owner == 'galaxyproject' }}
    uses: ./.github/workflows/wf_setup.yaml
    with:
      # default-galaxy-fork: galaxyproject
      # default-galaxy-branch: release_22.05
      max-chunks: 40
      github-event-name-override: 'schedule'
    secrets:
      PAT: ${{ secrets.PAT }}

  check-setup-ci-tools:
    name: Check setup
    needs: setup-ci-tools
    runs-on: ubuntu-latest
    steps:
    - name: Check for empty commit range
      run: if [ -n "${{ needs.setup-ci-tools.outputs.commit-range }}" ]; then exit 1; fi
    # note: ci_find_repos will find all tools and workflows
    - name: Check that all tools an workflows are in the repository list
      run: |
        if ! grep -q "tool1" <<<$(echo "${{ needs.setup-ci-tools.outputs.repository-list }}"); then echo "tool1 must be in the repo list"; exit 1; fi
        if ! grep -q "tool2" <<<$(echo "${{ needs.setup-ci-tools.outputs.repository-list }}"); then echo "tool2 must be in the repo list"; exit 1; fi
        if grep -q "example3" <<<$(echo "${{ needs.setup-ci-tools.outputs.repository-list }}"); then echo "example3 must not be in the repo list"; exit 1; fi
        if grep -q "example4" <<<$(echo "${{ needs.setup-ci-tools.outputs.repository-list }}"); then echo "example4 must not be in the repo list"; exit 1; fi
    # note: ci_find_tools will find onlytools
    - name: Check that all tools are in the tool list
      run: |
        if ! grep -q "tool1.xml" <<<$(echo "${{ needs.setup-ci-tools.outputs.tool-list }}"); then echo "tool1.xml must be in the repo list"; exit 1; fi
        if ! grep -q "tool2.xml" <<<$(echo "${{ needs.setup-ci-tools.outputs.tool-list }}"); then echo "tool2.xml must be in the repo list"; exit 1; fi
    # chunk-count will only consider tools/workflows depending on the workflow input to the action
    - name: Check that the number of chunks is three, i.e. the number of tools
      run: if [ "${{ needs.setup-ci-tools.outputs.chunk-count }}" != "3" ]; then exit 1; fi

  lint:
    name: Lint
    needs: setup-ci-tools
    uses: ./.github/workflows/wf_lint.yaml
    with:
      repository-list: ${{ needs.setup-ci-tools.outputs.repository-list }}
      tool-list: ${{ needs.setup-ci-tools.outputs.tool-list }}
      galaxy-head-sha: ${{ needs.setup-ci-tools.outputs.galaxy-head-sha }}
      commit-range: ${{ needs.setup-ci-tools.outputs.commit-range }}
      planemo-version: ${{ needs.setup-ci-tools.outputs.planemo-version }}
      fail-level: error

  check-lint:
    name: Check linting results
    needs: lint
    runs-on: ubuntu-latest
    steps:  
    - uses: actions/download-artifact@v3
      with:
        path: lint_report.txt
    # TODO check result of lint job (ie make sure it failed)
    - name: check if all test tools were linted
      run: |
        grep tool1 lint_report.txt
        grep tool2 lint_report.txt
        grep "ERROR: Error 'HTTPConnectionPool" lint_report.txt
        grep "Applying linter tests... CHECK" lint_report.txt

  test-tools:
    name: Test tools
    needs: setup-ci-tools
    uses: ./.github/workflows/wf_test.yaml
    with:
      galaxy-fork: ${{ needs.setup-ci-tools.outputs.galaxy-fork }}
      galaxy-branch: ${{ needs.setup-ci-tools.outputs.galaxy-branch }}
      planemo-version: ${{ needs.setup-ci-tools.outputs.planemo-version }}
      repository-list: ${{ needs.setup-ci-tools.outputs.repository-list }}
      chunk-count: ${{ needs.setup-ci-tools.outputs.chunk-count }}
      chunk-list: ${{ needs.setup-ci-tools.outputs.chunk-list }}
      galaxy-head-sha: ${{ needs.setup-ci-tools.outputs.galaxy-head-sha }}
      # set these values if you want to use different values than the IUC defaults
      # test-timeout: 900

  check-test:
    name: Check testing results
    needs: [setup-ci-tools, test-tools]
    runs-on: ubuntu-latest
    steps:
    - name: Check statistics
      run: if ! grep -q "3\s\+success" <<<$(echo ${{ needs.test-tools.outputs.statistics }}); then echo "wrong statistics"; exit 1; fi
    - uses: actions/upload-artifact@v3
      with:
        name: 'All tool test results'
        path: upload
